{"name":"Phantom","tagline":"Asynchronous type-safe Scala DSL for Cassandra","body":"phantom\r\n==============\r\nAsynchronous Scala DSL for Cassandra\r\n\r\n[![Build Status](https://travis-ci.org/newzly/phantom.png?branch=develop)](https://travis-ci.org/newzly/phantom)\r\n\r\nThrift IDL definitions\r\n======================\r\n```thrift\r\nnamespace java com.newzly.phantom.sample.ExampleModel\r\n\r\nstuct Model {\r\n  1: required i32 id,\r\n  2: required string name,\r\n  3: required Map<string, string> props,\r\n  4: required i32 timestamp\r\n  5: optional i32 test\r\n}\r\n```\r\n\r\nData modeling with phantom\r\n==========================\r\n\r\n  \r\n```scala\r\n\r\nimport java.util.{ UUID, Date }\r\nimport com.datastax.driver.core.Row\r\nimport com.newzly.phantom.sample.ExampleModel\r\nimport com.newzly.phantom.Implicits._\r\n\r\nsealed class ExampleRecord private() extends CassandraTable[ExampleRecord, ExampleModel] {\r\n\r\n  object id extends UUIDColumn(this) with PartitionKey[UUID]\r\n  object timestamp extends DateTimeColumn(this) with ClusteringOrder with Ascending\r\n  object name extends PrimitiveColumn[String](this)\r\n  object props extends MapColumn[String, String](this)\r\n  object test extends OptionalIntColumn(this)\r\n\r\n  override def fromRow(row: Row): ExampleModel = {\r\n    ExampleModel(id(row), name(row), props(row), timestamp(row), test(row));\r\n  }\r\n}\r\n\r\n\r\n```\r\n\r\nQuerying with Phantom\r\n=====================\r\n\r\nThe query syntax is inspired by the Foursquare Rogue library and aims to replicate CQL 3 as much as possible.\r\n\r\n```scala\r\n\r\nimport com.twitter.util.Future\r\n\r\nobject ExampleRecord extends ExampleRecord {\r\n  override val tableName = \"examplerecord\"\r\n\r\n  // now define a session, which is a Cluster connection.\r\n  implicit val session = SomeCassandraClient.session;\r\n  \r\n  def getRecordsByName(name: String): Future[Seq[ExampleModel]] = {\r\n    ExampleRecord.select.where(_.name eqs name).fetch\r\n  }\r\n  \r\n  def getOneRecordByName(name: String): Future[Option[ExampleModel]] = {\r\n    ExampelRecord.select.where(_.name eqs name).one()\r\n  }\r\n  \r\n  // preserving order in Cassandra is not the simplest thing, but:\r\n  def getRecordPage(start: Int, limit: Int): Future[Seq[ExampleModel]] = {\r\n    ExampleRecord.select.skip(start).limit(10).fetch\r\n  }\r\n  \r\n}\r\n```\r\n\r\n\r\nLarge record sets\r\n=================\r\n\r\nPhantom comes packed with CQL rows asynchronous lazy iterators to help you deal with billions of records.\r\n\r\nUsage is trivial:\r\n\r\n```scala\r\nExampleRecord.select.fetchEnumerator.foreach {\r\n   item => println(item.toString)\r\n}\r\n```\r\n\r\nBatch statements\r\n================\r\n\r\nphantom also brrings in support for batch statements. To use them, see [IterateeBigTest.scala]( https://github.com/newzly/phantom/blob/develop/phantom-test/src/test/scala/com/newzly/phantom/iteratee/IterateeBigTest.scala)\r\n\r\nWe have tested with 10,000 statements per batch, and 1000 batches processed simulatenously.\r\n\r\n\r\nMaintainers\r\n===========\r\n\r\nPhantom was developed at newzly as an in-house project.\r\nAll Cassandra integration at newzly goes through Phantom.\r\n\r\n- Sorin Chiprian sorin.chiprian@newzly.com\r\n- Flavian Alexandru flavian@newzly.com\r\n\r\nPre newzly fork\r\n===============\r\nSpecial thanks to Viktor Taranenko from WhiskLabs, who gave us the original idea.\r\n\r\nCopyright\r\n=========\r\nCopyright 2013 WhiskLabs, Copyright 2013 - 2014 newzly ltd.\r\n\r\n\r\nContributions\r\n=============\r\n\r\nContributions are most welcome! \r\n\r\nTo contribute, simply submit a \"Pull request\" via GitHub.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}